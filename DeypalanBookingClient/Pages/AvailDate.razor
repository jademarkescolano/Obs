@page "/availdate"
@using DeypalanBookingClient.Models
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client
@inject ILocalStorageService localStorage
@inject HttpClient Http
@inject IJSRuntime IJS
@inject NavigationManager NavigationManager
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<PageTitle>Services</PageTitle>
<br />
<MudToolBar>
    <MudSpacer /> <MudSpacer /> <MudSpacer />
    <MudDatePicker Variant="Variant.Outlined" Margin="MudBlazor.Margin.Dense" Label="Search Date" Date="_date" DateChanged="@(value =>
            { _date = value; SearchDate(); })" DateFormat="yyyy-MM-dd" />

</MudToolBar>


<MudTable Class="ma-5" Dense="true" Hover="true" Items="@availdatelist"
          FixedHeader="@fixed_header" FixedFooter="@fixed_footer"
          Height="@(fixed_header || fixed_footer ?"500px": "")">

    <HeaderContent>

        <MudTh>
            <MudTableSortLabel SortBy="new Func<availdate, object>(c => c.date)" InitialDirection="SortDirection.Ascending">
                Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>

    <RowTemplate>

        <MudTd DataLabel="Services">@context.date.ToString("MMMM d, yyyy")</MudTd>
        <MudTd DataLabel="Status" Style="color: white">
            <span class="@GetStatusColor(context.status)">@context.status</span>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 20, 50, 100, 200}" />
    </PagerContent>
</MudTable>


@code {
    public string? txtsearch { get; set; }
    DateTime? _date = DateTime.Today;
    [Parameter] public availdate _availdate { get; set; } = new availdate();
    availdate xavaildate = new();
    availdate[]? availdatelist;

    bool fixed_header = true;
    bool fixed_footer = false;

    //SignalR
    private HubConnection? hubConnection;
    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hub"))
            .Build();

        hubConnection.On("client", async () =>
       {
           await Task.Delay(2000);
           await GetServices();
           StateHasChanged();
       });
        await hubConnection.StartAsync();
    }

    private string GetStatusColor(string status)
    {
        if (status == "AVAILABLE")
        {
            return "bg-success";
        }
        else if (status == "UNAVAILABLE")
        {
            return "bg-danger";
        }
        return "";
    }



    private async Task SearchDate()
    {
        await hubConnection.StopAsync();

        using (HttpClient client = new HttpClient())
        {
            client.BaseAddress = new Uri($"https://7n64m6cd-7140.asse.devtunnels.ms/");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("token"));
            HttpResponseMessage response = await client.GetAsync($"api/AvailDate/SearchScheduleDate?date={_date.Value:yyyy-MM-dd}");

            if (response.IsSuccessStatusCode)
            {
                string contentrespose = await response.Content.ReadAsStringAsync();
                availdatelist = JsonConvert.DeserializeObject<availdate[]>(contentrespose);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add($"Warning: {response.StatusCode}", Severity.Warning);
            }
        }
    }

   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetServices();
            await InvokeAsync(() => StateHasChanged());
        }
    }

    public async Task GetServices()
    {

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendClient");
        }

        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"https://7n64m6cd-7140.asse.devtunnels.ms/");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.GetAsync($"api/AvailDate/AvailDate");
                if (response.IsSuccessStatusCode)
                {
                    string contentrespose = await response.Content.ReadAsStringAsync();
                    availdatelist = JsonConvert.DeserializeObject<availdate[]>(contentrespose);
                    await InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    Snackbar.Configuration.PositionClass = "Center";
                    Snackbar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                    await InvokeAsync(() => StateHasChanged());
                }

            }
        }
        catch (Exception ex)
        {
            //
        }

    }

}
