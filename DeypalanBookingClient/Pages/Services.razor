@page "/services"
@using DeypalanBookingClient.Models
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ISnackbar ISnackbar
@inject ILocalStorageService IlocalStorage



<PageTitle>Services</PageTitle>
<br />
<MudTable Class="ma-5" Dense="true" Hover="true" Items="@serviceslist"
          FixedHeader="@fixed_header" FixedFooter="@fixed_footer"
          Height="@(fixed_header || fixed_footer ?"500px": "")">

    <HeaderContent>
        <MudTh>Services</MudTh>
        <MudTh>Price</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Services">@context.service</MudTd>
        <MudTd DataLabel="Price">@context.price</MudTd>
    </RowTemplate>


    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{10, 20, 50, 100, 200}" />
    </PagerContent>
</MudTable>


@code {
    services xservices = new();
    services[]? serviceslist;

    bool fixed_header = true;
    bool fixed_footer = false;


    //SignalR
    private HubConnection? hubConnection;
    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hub"))
            .Build();

        hubConnection.On("client", async () =>
       {
           await Task.Delay(2000);
           await GetServices();
           StateHasChanged();
       });
        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetServices();
            await InvokeAsync(() => StateHasChanged());
        }
    }

    public async Task GetServices()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendClient");
        }
      
        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"https://7n64m6cd-7140.asse.devtunnels.ms/");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await IlocalStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.GetAsync($"api/ServicesOffered/Services");
                if (response.IsSuccessStatusCode)
                {
                    string contentrespose = await response.Content.ReadAsStringAsync();
                    serviceslist = JsonConvert.DeserializeObject<services[]>(contentrespose);
                    await InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    ISnackbar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                    await InvokeAsync(() => StateHasChanged());
                }

            }
        }
        catch (Exception ex)
        {
            //
        }

    }

}
