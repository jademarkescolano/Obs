@using DeypalanBooking.Models;
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudTable Class="ma-5" Dense="true" Hover="true" Items="@clientlist"
                  FixedHeader="@fixed_header" FixedFooter="@fixed_footer"
                  Height="@(fixed_header || fixed_footer ?"500px": "")">
            <HeaderContent>
           
                <MudTh>Name</MudTh>
                <MudTh>Address</MudTh>
                <MudTh>Contact</MudTh>
                <MudTh>Service</MudTh>
                <MudTh>Date</MudTh>
                <MudTh>Status</MudTh>
                <MudTh></MudTh>
                <MudTh></MudTh>
            </HeaderContent>

            <RowTemplate>
             
                <MudTd DataLabel="Name">@context.name</MudTd>
                <MudTd DataLabel="Address">@context.address</MudTd>
                <MudTd DataLabel="Contact">@context.contact</MudTd>
                <MudTd DataLabel="Service">@context.service</MudTd>
                <MudTd DataLabel="Date">@context.sched.ToString("dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="Status">@context.status</MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 20, 50, 100, 200}" />
            </PagerContent>
        </MudTable>


    </DialogContent>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public clients _client { get; set; } = new clients();
    clients[]? clientlist;

    bool fixed_header = true;
    bool fixed_footer = false;

    private async Task ShowAlertAsync(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private void Close()
    {
        MudDialog.Cancel();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetClient();
            await InvokeAsync(() => StateHasChanged());
        }
    }


    public async Task GetClient()
    {

        try
        {
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{NavigationManager.BaseUri}");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.GetAsync($"api/Client/DeclinedClients");
                if (response.IsSuccessStatusCode)
                {
                    string contentrespose = await response.Content.ReadAsStringAsync();
                    clientlist = JsonConvert.DeserializeObject<clients[]>(contentrespose);
                    await InvokeAsync(() => StateHasChanged());
                }
                else
                {
                    Snackbar.Configuration.PositionClass = "Center";
                    Snackbar.Add($"Warning: {response.StatusCode}", Severity.Warning);
                    await InvokeAsync(() => StateHasChanged());
                }

            }
        }
        catch (Exception ex)
        {
            //
        }

    }
}

