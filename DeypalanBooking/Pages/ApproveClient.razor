@using DeypalanBooking.Models
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
    <MudToolBar>
        <MudSpacer/>
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Medium" Color="Color.Primary" @onclick="Close">Close</MudButton>&nbsp;
            <MudButton Variant="Variant.Filled" Size="MudBlazor.Size.Medium" Color="Color.Tertiary" @onclick="Save">Approved</MudButton>
    </MudToolBar>
       
    </DialogContent>
</MudDialog>


@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public clients _client { get; set; } = new clients();
    [Parameter] public services xservices { get; set; } = new services();
    clients[]? _clients;

    private async Task ShowAlertAsync(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private void Close()
    {
        MudDialog.Cancel();
    }
    async Task Save()
    {
        int i = 0;
        try
        {
            var xclient = new clients
                {
                    client_id = _client.client_id,
                    name = _client.name,
                    address = _client.address,
                    gender = _client.gender,
                    contact = _client.contact,
                    serviceid = xservices.serviceid,
                    service = xservices.service,
                    sched = _client.sched,
                    status = _client.status
                };

            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{NavigationManager.BaseUri}");
                var json = JsonConvert.SerializeObject(xclient);
                HttpContent content = new StringContent(json);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PostAsync($"api/Client/Approved", content);

                if (response.IsSuccessStatusCode)
                {
                    string contentresponse = await response.Content.ReadAsStringAsync();
                    i = JsonConvert.DeserializeObject<int>(contentresponse);
                    if (i > 0)
                    {
                        Snackbar.Configuration.PositionClass = "Center";
                        Snackbar.Add($"Done: Successfully Updated!", Severity.Success);
                        await InvokeAsync(StateHasChanged);
                        MudDialog.Close();
                    }
                }
                else
                {
                    await ShowAlertAsync("Update failed.");
                }

            }
        }
        catch (Exception ex)
        {



        }
    }
}
